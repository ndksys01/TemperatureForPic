CCS PCM C Compiler, Version 4.114, 93460303               25-May-14 16:53

               Filename: D:\DOCUMENT\HK8\Luan Van Tot Nghiep\NhietDo\NhietDo.lst

               ROM used: 990 words (12%)
                         Largest free fragment is 2048
               RAM used: 31 (8%) at main() level
                         63 (17%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   293
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   1C1
.................... #include <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device  adc=10 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
02B2:  BCF    03.6
02B3:  CLRF   28
02B4:  CLRF   29
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #use delay(clock =4M) 
*
027E:  MOVLW  37
027F:  MOVWF  04
0280:  BCF    03.7
0281:  MOVF   00,W
0282:  BTFSC  03.2
0283:  GOTO   292
0284:  MOVLW  01
0285:  MOVWF  78
0286:  CLRF   77
0287:  DECFSZ 77,F
0288:  GOTO   287
0289:  DECFSZ 78,F
028A:  GOTO   286
028B:  MOVLW  4A
028C:  MOVWF  77
028D:  DECFSZ 77,F
028E:  GOTO   28D
028F:  GOTO   290
0290:  DECFSZ 00,F
0291:  GOTO   284
0292:  RETURN
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7) 
....................  
....................    INT temp=0; 
....................  
.................... char nhietDo[6]; 
.................... float tmpNhietdo; 
....................  
.................... void init_adc(INT kenh) 
.................... { 
....................    setup_adc (adc_clock_internal); 
*
0249:  BSF    1F.6
024A:  BSF    1F.7
024B:  BSF    03.5
024C:  BSF    1F.7
024D:  BCF    03.5
024E:  BSF    1F.0
....................  
....................    IF (kenh == 0) 
024F:  MOVF   36,F
0250:  BTFSS  03.2
0251:  GOTO   266
....................    { 
....................       setup_adc_ports (sAN0|VSS_VDD); 
0252:  BSF    03.5
0253:  BSF    03.6
0254:  MOVF   09,W
0255:  ANDLW  C0
0256:  MOVWF  09
0257:  BCF    03.6
0258:  BCF    1F.4
0259:  BCF    1F.5
025A:  MOVLW  01
025B:  BSF    03.6
025C:  MOVWF  08
....................       set_adc_channel (0); 
025D:  MOVLW  00
025E:  MOVWF  78
025F:  BCF    03.5
0260:  BCF    03.6
0261:  MOVF   1F,W
0262:  ANDLW  C3
0263:  IORWF  78,W
0264:  MOVWF  1F
....................    } 
....................  
....................    else IF (kenh == 1) 
0265:  GOTO   27B
0266:  DECFSZ 36,W
0267:  GOTO   27B
....................    { 
....................       setup_adc_ports (sAN1|VSS_VDD); 
0268:  BSF    03.5
0269:  BSF    03.6
026A:  MOVF   09,W
026B:  ANDLW  C0
026C:  MOVWF  09
026D:  BCF    03.6
026E:  BCF    1F.4
026F:  BCF    1F.5
0270:  MOVLW  02
0271:  BSF    03.6
0272:  MOVWF  08
....................       set_adc_channel (1); 
0273:  MOVLW  04
0274:  MOVWF  78
0275:  BCF    03.5
0276:  BCF    03.6
0277:  MOVF   1F,W
0278:  ANDLW  C3
0279:  IORWF  78,W
027A:  MOVWF  1F
....................    } 
.................... } 
027B:  BCF    0A.3
027C:  BCF    0A.4
027D:  GOTO   2B9 (RETURN)
....................  
.................... #INT_rda 
....................  
.................... void uartInterrupt() 
.................... { 
....................    temp = read_adc (); 
*
01C1:  BSF    1F.1
01C2:  BTFSC  1F.1
01C3:  GOTO   1C2
01C4:  BSF    03.5
01C5:  MOVF   1E,W
01C6:  BCF    03.5
01C7:  MOVWF  2A
....................    tmpNhietdo = (FLOAT) ( ((temp * 5.1 * 100) / 1023)); 
01C8:  CLRF   49
01C9:  MOVF   2A,W
01CA:  MOVWF  48
01CB:  CALL   031
01CC:  MOVF   7A,W
01CD:  MOVWF  4F
01CE:  MOVF   79,W
01CF:  MOVWF  4E
01D0:  MOVF   78,W
01D1:  MOVWF  4D
01D2:  MOVF   77,W
01D3:  MOVWF  4C
01D4:  MOVLW  33
01D5:  MOVWF  53
01D6:  MOVWF  52
01D7:  MOVLW  23
01D8:  MOVWF  51
01D9:  MOVLW  81
01DA:  MOVWF  50
01DB:  CALL   04E
01DC:  MOVF   77,W
01DD:  MOVWF  48
01DE:  MOVF   78,W
01DF:  MOVWF  49
01E0:  MOVF   79,W
01E1:  MOVWF  4A
01E2:  MOVF   7A,W
01E3:  MOVWF  4B
01E4:  MOVWF  4F
01E5:  MOVF   79,W
01E6:  MOVWF  4E
01E7:  MOVF   78,W
01E8:  MOVWF  4D
01E9:  MOVF   77,W
01EA:  MOVWF  4C
01EB:  CLRF   53
01EC:  CLRF   52
01ED:  MOVLW  48
01EE:  MOVWF  51
01EF:  MOVLW  85
01F0:  MOVWF  50
01F1:  CALL   04E
01F2:  MOVF   77,W
01F3:  MOVWF  48
01F4:  MOVF   78,W
01F5:  MOVWF  49
01F6:  MOVF   79,W
01F7:  MOVWF  4A
01F8:  MOVF   7A,W
01F9:  MOVWF  4B
01FA:  MOVWF  4F
01FB:  MOVF   79,W
01FC:  MOVWF  4E
01FD:  MOVF   78,W
01FE:  MOVWF  4D
01FF:  MOVF   77,W
0200:  MOVWF  4C
0201:  CLRF   53
0202:  MOVLW  C0
0203:  MOVWF  52
0204:  MOVLW  7F
0205:  MOVWF  51
0206:  MOVLW  88
0207:  MOVWF  50
0208:  CALL   0C3
0209:  MOVF   7A,W
020A:  MOVWF  34
020B:  MOVF   79,W
020C:  MOVWF  33
020D:  MOVF   78,W
020E:  MOVWF  32
020F:  MOVF   77,W
0210:  MOVWF  31
....................    nhietDo[0] = '#'; 
0211:  MOVLW  23
0212:  MOVWF  2B
....................    nhietDo[1] = '5'; 
0213:  MOVLW  35
0214:  MOVWF  2C
....................    nhietDo[2] = ( ( (INT) tmpNhietdo) % 100) / 10 + 48; 
0215:  MOVF   34,W
0216:  MOVWF  4B
0217:  MOVF   33,W
0218:  MOVWF  4A
0219:  MOVF   32,W
021A:  MOVWF  49
021B:  MOVF   31,W
021C:  MOVWF  48
021D:  CALL   18D
021E:  MOVF   78,W
021F:  MOVWF  49
0220:  MOVLW  64
0221:  MOVWF  4A
0222:  CALL   1AC
0223:  MOVF   77,W
0224:  MOVWF  49
0225:  MOVLW  0A
0226:  MOVWF  4A
0227:  CALL   1AC
0228:  MOVLW  30
0229:  ADDWF  78,W
022A:  MOVWF  2D
....................    nhietDo[3] = ( (INT) tmpNhietdo % 100) % 10 + 48; 
022B:  MOVF   34,W
022C:  MOVWF  4B
022D:  MOVF   33,W
022E:  MOVWF  4A
022F:  MOVF   32,W
0230:  MOVWF  49
0231:  MOVF   31,W
0232:  MOVWF  48
0233:  CALL   18D
0234:  MOVF   78,W
0235:  MOVWF  49
0236:  MOVLW  64
0237:  MOVWF  4A
0238:  CALL   1AC
0239:  MOVF   77,W
023A:  MOVWF  49
023B:  MOVLW  0A
023C:  MOVWF  4A
023D:  CALL   1AC
023E:  MOVLW  30
023F:  ADDWF  77,W
0240:  MOVWF  2E
....................    nhietDo[4] = '.'; 
0241:  MOVLW  2E
0242:  MOVWF  2F
....................    nhietDo[5] = 0 + 48; 
0243:  MOVLW  30
0244:  MOVWF  30
.................... } 
....................  
0245:  BCF    0C.5
0246:  BCF    0A.3
0247:  BCF    0A.4
0248:  GOTO   01D
.................... void main() 
.................... { 
*
0293:  CLRF   04
0294:  BCF    03.7
0295:  MOVLW  1F
0296:  ANDWF  03,F
0297:  BSF    03.5
0298:  BSF    03.6
0299:  BCF    07.3
029A:  MOVLW  19
029B:  BCF    03.6
029C:  MOVWF  19
029D:  MOVLW  A6
029E:  MOVWF  18
029F:  MOVLW  90
02A0:  BCF    03.5
02A1:  MOVWF  18
02A2:  CLRF   2A
02A3:  BSF    03.5
02A4:  BSF    03.6
02A5:  MOVF   09,W
02A6:  ANDLW  C0
02A7:  MOVWF  09
02A8:  BCF    03.6
02A9:  BCF    1F.4
02AA:  BCF    1F.5
02AB:  MOVLW  00
02AC:  BSF    03.6
02AD:  MOVWF  08
02AE:  BCF    03.5
02AF:  CLRF   07
02B0:  CLRF   08
02B1:  CLRF   09
*
02B5:  CLRF   35
....................    UNSIGNED char a = 0; 
....................    init_adc (1) ; 
02B6:  MOVLW  01
02B7:  MOVWF  36
02B8:  GOTO   249
....................    enable_interrupts (global); //Cho phep ngat toan cuc 
02B9:  MOVLW  C0
02BA:  IORWF  0B,F
....................    enable_interrupts (INT_rda); //Cho phep ngat UART 
02BB:  BSF    03.5
02BC:  BSF    0C.5
....................    WHILE (1) 
....................    { 
....................        
....................       temp = read_adc (); 
02BD:  BCF    03.5
02BE:  BSF    1F.1
02BF:  BTFSC  1F.1
02C0:  GOTO   2BF
02C1:  BSF    03.5
02C2:  MOVF   1E,W
02C3:  BCF    03.5
02C4:  MOVWF  2A
02C5:  CLRF   27
02C6:  BTFSC  0B.7
02C7:  BSF    27.7
02C8:  BCF    0B.7
....................       tmpNhietdo = (FLOAT) ( ((temp * 5.1 * 100) / 1023)); 
02C9:  CLRF   49
02CA:  MOVF   2A,W
02CB:  MOVWF  48
02CC:  CALL   031
02CD:  BTFSC  27.7
02CE:  BSF    0B.7
02CF:  CLRF   27
02D0:  BTFSC  0B.7
02D1:  BSF    27.7
02D2:  BCF    0B.7
02D3:  MOVF   7A,W
02D4:  MOVWF  4F
02D5:  MOVF   79,W
02D6:  MOVWF  4E
02D7:  MOVF   78,W
02D8:  MOVWF  4D
02D9:  MOVF   77,W
02DA:  MOVWF  4C
02DB:  MOVLW  33
02DC:  MOVWF  53
02DD:  MOVWF  52
02DE:  MOVLW  23
02DF:  MOVWF  51
02E0:  MOVLW  81
02E1:  MOVWF  50
02E2:  CALL   04E
02E3:  BTFSC  27.7
02E4:  BSF    0B.7
02E5:  MOVF   77,W
02E6:  MOVWF  36
02E7:  MOVF   78,W
02E8:  MOVWF  37
02E9:  MOVF   79,W
02EA:  MOVWF  38
02EB:  MOVF   7A,W
02EC:  MOVWF  39
02ED:  CLRF   27
02EE:  BTFSC  0B.7
02EF:  BSF    27.7
02F0:  BCF    0B.7
02F1:  MOVF   7A,W
02F2:  MOVWF  4F
02F3:  MOVF   79,W
02F4:  MOVWF  4E
02F5:  MOVF   78,W
02F6:  MOVWF  4D
02F7:  MOVF   77,W
02F8:  MOVWF  4C
02F9:  CLRF   53
02FA:  CLRF   52
02FB:  MOVLW  48
02FC:  MOVWF  51
02FD:  MOVLW  85
02FE:  MOVWF  50
02FF:  CALL   04E
0300:  BTFSC  27.7
0301:  BSF    0B.7
0302:  MOVF   77,W
0303:  MOVWF  36
0304:  MOVF   78,W
0305:  MOVWF  37
0306:  MOVF   79,W
0307:  MOVWF  38
0308:  MOVF   7A,W
0309:  MOVWF  39
030A:  CLRF   27
030B:  BTFSC  0B.7
030C:  BSF    27.7
030D:  BCF    0B.7
030E:  MOVF   7A,W
030F:  MOVWF  4F
0310:  MOVF   79,W
0311:  MOVWF  4E
0312:  MOVF   78,W
0313:  MOVWF  4D
0314:  MOVF   77,W
0315:  MOVWF  4C
0316:  CLRF   53
0317:  MOVLW  C0
0318:  MOVWF  52
0319:  MOVLW  7F
031A:  MOVWF  51
031B:  MOVLW  88
031C:  MOVWF  50
031D:  CALL   0C3
031E:  BTFSC  27.7
031F:  BSF    0B.7
0320:  MOVF   7A,W
0321:  MOVWF  34
0322:  MOVF   79,W
0323:  MOVWF  33
0324:  MOVF   78,W
0325:  MOVWF  32
0326:  MOVF   77,W
0327:  MOVWF  31
0328:  CLRF   27
0329:  BTFSC  0B.7
032A:  BSF    27.7
032B:  BCF    0B.7
....................       nhietDo[0] = ( ( (INT) tmpNhietdo) % 100) / 10 + 48; 
032C:  MOVF   34,W
032D:  MOVWF  4B
032E:  MOVF   33,W
032F:  MOVWF  4A
0330:  MOVF   32,W
0331:  MOVWF  49
0332:  MOVF   31,W
0333:  MOVWF  48
0334:  CALL   18D
0335:  BTFSC  27.7
0336:  BSF    0B.7
0337:  CLRF   27
0338:  BTFSC  0B.7
0339:  BSF    27.7
033A:  BCF    0B.7
033B:  MOVF   78,W
033C:  MOVWF  49
033D:  MOVLW  64
033E:  MOVWF  4A
033F:  CALL   1AC
0340:  BTFSC  27.7
0341:  BSF    0B.7
0342:  CLRF   27
0343:  BTFSC  0B.7
0344:  BSF    27.7
0345:  BCF    0B.7
0346:  MOVF   77,W
0347:  MOVWF  49
0348:  MOVLW  0A
0349:  MOVWF  4A
034A:  CALL   1AC
034B:  BTFSC  27.7
034C:  BSF    0B.7
034D:  MOVLW  30
034E:  ADDWF  78,W
034F:  MOVWF  2B
0350:  CLRF   27
0351:  BTFSC  0B.7
0352:  BSF    27.7
0353:  BCF    0B.7
....................       nhietDo[1] = ( (INT) tmpNhietdo % 100) % 10 + 48; 
0354:  MOVF   34,W
0355:  MOVWF  4B
0356:  MOVF   33,W
0357:  MOVWF  4A
0358:  MOVF   32,W
0359:  MOVWF  49
035A:  MOVF   31,W
035B:  MOVWF  48
035C:  CALL   18D
035D:  BTFSC  27.7
035E:  BSF    0B.7
035F:  CLRF   27
0360:  BTFSC  0B.7
0361:  BSF    27.7
0362:  BCF    0B.7
0363:  MOVF   78,W
0364:  MOVWF  49
0365:  MOVLW  64
0366:  MOVWF  4A
0367:  CALL   1AC
0368:  BTFSC  27.7
0369:  BSF    0B.7
036A:  CLRF   27
036B:  BTFSC  0B.7
036C:  BSF    27.7
036D:  BCF    0B.7
036E:  MOVF   77,W
036F:  MOVWF  49
0370:  MOVLW  0A
0371:  MOVWF  4A
0372:  CALL   1AC
0373:  BTFSC  27.7
0374:  BSF    0B.7
0375:  MOVLW  30
0376:  ADDWF  77,W
0377:  MOVWF  2C
....................       nhietDo[2] = '.'; 
0378:  MOVLW  2E
0379:  MOVWF  2D
....................       nhietDo[3] = 48; // (INT) (tmpNhietdo * 10) % 10  +  48; 
037A:  MOVLW  30
037B:  MOVWF  2E
....................       nhietDo[4] = '\r'; 
037C:  MOVLW  0D
037D:  MOVWF  2F
....................       nhietDo[5] = '\n'; 
037E:  MOVLW  0A
037F:  MOVWF  30
....................       //printf (nhietDo); 
....................       putc ('#'); delay_ms (1) ; 
0380:  MOVLW  23
0381:  BTFSS  0C.4
0382:  GOTO   381
0383:  MOVWF  19
0384:  MOVLW  01
0385:  MOVWF  37
0386:  CALL   27E
....................       putc ('1'); delay_ms (1) ; 
0387:  MOVLW  31
0388:  BTFSS  0C.4
0389:  GOTO   388
038A:  MOVWF  19
038B:  MOVLW  01
038C:  MOVWF  37
038D:  CALL   27E
....................       putc (nhietDo[0]); delay_ms (1) ; 
038E:  MOVF   2B,W
038F:  BTFSS  0C.4
0390:  GOTO   38F
0391:  MOVWF  19
0392:  MOVLW  01
0393:  MOVWF  37
0394:  CALL   27E
....................       putc (nhietDo[1]); delay_ms (1) ; 
0395:  MOVF   2C,W
0396:  BTFSS  0C.4
0397:  GOTO   396
0398:  MOVWF  19
0399:  MOVLW  01
039A:  MOVWF  37
039B:  CALL   27E
....................       putc (nhietDo[2]); delay_ms (1) ; 
039C:  MOVF   2D,W
039D:  BTFSS  0C.4
039E:  GOTO   39D
039F:  MOVWF  19
03A0:  MOVLW  01
03A1:  MOVWF  37
03A2:  CALL   27E
....................       putc (nhietDo[3]); delay_ms (1) ; 
03A3:  MOVF   2E,W
03A4:  BTFSS  0C.4
03A5:  GOTO   3A4
03A6:  MOVWF  19
03A7:  MOVLW  01
03A8:  MOVWF  37
03A9:  CALL   27E
....................       putc (nhietDo[4]); delay_ms (1) ; 
03AA:  MOVF   2F,W
03AB:  BTFSS  0C.4
03AC:  GOTO   3AB
03AD:  MOVWF  19
03AE:  MOVLW  01
03AF:  MOVWF  37
03B0:  CALL   27E
....................       putc (nhietDo[5]); delay_ms (1) ; 
03B1:  MOVF   30,W
03B2:  BTFSS  0C.4
03B3:  GOTO   3B2
03B4:  MOVWF  19
03B5:  MOVLW  01
03B6:  MOVWF  37
03B7:  CALL   27E
....................       delay_ms (500); delay_ms (500) ; 
03B8:  MOVLW  02
03B9:  MOVWF  36
03BA:  MOVLW  FA
03BB:  MOVWF  37
03BC:  CALL   27E
03BD:  DECFSZ 36,F
03BE:  GOTO   3BA
03BF:  MOVLW  02
03C0:  MOVWF  36
03C1:  MOVLW  FA
03C2:  MOVWF  37
03C3:  CALL   27E
03C4:  DECFSZ 36,F
03C5:  GOTO   3C1
....................       delay_ms (500); delay_ms (500) ; 
03C6:  MOVLW  02
03C7:  MOVWF  36
03C8:  MOVLW  FA
03C9:  MOVWF  37
03CA:  CALL   27E
03CB:  DECFSZ 36,F
03CC:  GOTO   3C8
03CD:  MOVLW  02
03CE:  MOVWF  36
03CF:  MOVLW  FA
03D0:  MOVWF  37
03D1:  CALL   27E
03D2:  DECFSZ 36,F
03D3:  GOTO   3CF
....................       output_d (a); 
03D4:  BSF    03.5
03D5:  CLRF   08
03D6:  BCF    03.5
03D7:  MOVF   35,W
03D8:  MOVWF  08
....................       a = 255 - a; 
03D9:  MOVF   35,W
03DA:  SUBLW  FF
03DB:  MOVWF  35
....................    } 
03DC:  GOTO   2BE
.................... } 
....................  
03DD:  SLEEP

Configuration Fuses:
   Word  1: 2FE7   RC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
